export interface Income {
  id: string;
  source: string;
  amount: number;
  frequency: 'weekly' | 'biweekly' | 'monthly' | 'yearly';
  monthlyAmount: number;
  bankAccountId: string;
  isRecurring?: boolean;
  nextOccurrence?: string;
  autoGenerated?: boolean;
}

export interface Expense {
  id: string;
  name: string;
  amount: number;
  category: 'need' | 'want';
  frequency: 'weekly' | 'biweekly' | 'monthly' | 'yearly';
  monthlyAmount: number;
  bankAccountId: string;
  linkedBudgetId?: string;
  linkedGoalId?: string;
  isRecurring?: boolean;
  nextOccurrence?: string;
  autoGenerated?: boolean;
  aiCategory?: string;
  confidence?: number;
}

export interface BankAccount {
  id: string;
  name: string;
  type: 'checking' | 'savings' | 'credit' | 'investment' | 'cash';
  balance: number;
  isActive: boolean;
  hasOverdraft?: boolean;
  overdraftLimit?: number;
  overdraftUsed?: number;
}

export interface Loan {
  id: string;
  name: string;
  principal: number;
  currentBalance: number;
  interestRate: number;
  minimumPayment: number;
  dueDate: string;
  startDate: string;
  loanPeriodMonths: number;
  penaltyRate?: number;
  otherCharges?: number;
  lender: string;
  negotiable?: boolean;
  lastNegotiated?: string;
}

export interface Bill {
  id: string;
  name: string;
  amount: number;
  dueDate: string;
  frequency: 'weekly' | 'biweekly' | 'monthly' | 'yearly';
  category: 'utility' | 'subscription' | 'insurance' | 'other';
  isPaid: boolean;
  bankAccountId?: string;
  isRecurring?: boolean;
  nextOccurrence?: string;
  autoGenerated?: boolean;
  negotiable?: boolean;
  lastNegotiated?: string;
  averageAmount?: number;
}

export interface DailyEntry {
  id: string;
  date: string;
  time?: string;
  income: number;
  expenses: number;
  category: 'need' | 'want';
  description: string;
  frequency?: 'once' | 'daily' | 'weekly' | 'monthly';
  incomeBankAccountId?: string;
  expenseBankAccountId?: string;
  aiCategorized?: boolean;
  confidence?: number;
}

export interface BusinessEntry {
  id: string;
  date: string;
  sales: number;
  stockValue: number;
  profit: number;
  profitToGoal: number;
  profitToGoalPercentage: number;
  description: string;
  profitAccountId: string;
  selectedGoalId?: string;
  marketingBudgetPercentage?: number;
  marketingBudgetAmount?: number;
  budgetItems?: BusinessBudgetItem[];
}

export interface BusinessBudgetItem {
  id: string;
  name: string;
  percentage: number;
  amount: number;
  priority: 'high' | 'medium' | 'low';
  isAutoAllocated: boolean;
}

export interface Transfer {
  id: string;
  fromAccountId: string;
  toAccountId: string;
  amount: number;
  description: string;
  isLoan: boolean;
  date: string;
}

export interface ExpectedPayment {
  id: string;
  type: 'income' | 'expense';
  name: string;
  amount: number;
  expectedDate: string;
  bankAccountId: string;
  personName?: string;
  description: string;
  isPaid: boolean;
  paidDate?: string;
  reminderSent: boolean;
  overdueReminders: number;
  createdAt: string;
  updatedAt: string;
}

export interface FinancialGoal {
  id: string;
  name: string;
  targetAmount: number;
  currentAmount: number;
  targetDate: string;
  category: 'emergency' | 'investment' | 'purchase' | 'vacation' | 'other';
  priority: 'high' | 'medium' | 'low';
  budgetAllocated?: number;
  spentAmount?: number;
  remainingBudget?: number;
  forecast?: GoalForecast;
}

export interface GoalForecast {
  projectedCompletionDate: string;
  monthlyContributionNeeded: number;
  probabilityOfSuccess: number;
  recommendedAdjustments: string[];
  milestones: GoalMilestone[];
}

export interface GoalMilestone {
  percentage: number;
  amount: number;
  estimatedDate: string;
  achieved: boolean;
  achievedDate?: string;
}

export interface Budget {
  id: string;
  name: string;
  category: 'need' | 'want' | 'business' | 'goal';
  allocatedAmount: number;
  spentAmount: number;
  remainingAmount: number;
  period: 'weekly' | 'monthly' | 'yearly';
  linkedGoalId?: string;
  isActive: boolean;
  alertThreshold: number;
  optimizationSuggestions?: string[];
}

export interface BudgetAlert {
  id: string;
  budgetId: string;
  budgetName: string;
  type: 'warning' | 'exceeded' | 'depleted';
  message: string;
  percentage: number;
  isRead: boolean;
  createdAt: string;
}

export interface GoalProgress {
  goalId: string;
  goalName: string;
  targetAmount: number;
  currentAmount: number;
  targetDate: string;
  daysRemaining: number;
  progressPercentage: number;
  monthlyRequired: number;
  isOnTrack: boolean;
  status: 'ahead' | 'on-track' | 'behind' | 'at-risk';
  recommendedAction?: string;
  monthsRemaining?: number;
}

export interface Currency {
  code: string;
  symbol: string;
  name: string;
}

export interface UserPreferences {
  strategy: 'debt-focused' | 'balanced' | 'savings-focused';
  riskTolerance: 'conservative' | 'moderate' | 'aggressive';
  emergencyFundMonths: number;
  autoAllocate: boolean;
  reminderTime: string;
  currency: Currency;
  debtStrategy?: 'avalanche' | 'snowball' | 'hybrid';
  autoSuggestStrategy: boolean;
  enableRecurringTransactions?: boolean;
  enableAICategories?: boolean;
  enableEducationModule?: boolean;
}

export interface AutoAllocation {
  debtPayment: number;
  emergencyFund: number;
  investments: number;
  needs: number;
  wants: number;
  businessProfit: number;
  totalAllocated: number;
  recommendations: string[];
  detailedBreakdown?: {
    totalIncome: number;
    fixedExpenses: number;
    minimumDebtPayments: number;
    accountDebtPayment: number;
    availableForAllocation: number;
    emergencyFundAllocation: number;
    investmentAllocation: number;
    extraDebtPayment: number;
    wantsAllocation: number;
    unallocated: number;
  };
}

export interface DebtRecommendation {
  loanId: string;
  loanName: string;
  strategy: 'avalanche' | 'snowball' | 'hybrid';
  priority: number;
  reason: string;
  suggestedPayment: number;
  urgencyScore: number;
  payoffMonths: number;
  totalInterest: number;
}

export interface PaymentSuggestion {
  id: string;
  type: 'loan' | 'bill' | 'goal';
  name: string;
  amount: number;
  priority: number;
  reason: string;
  urgency: 'critical' | 'high' | 'medium' | 'low';
  dueDate?: string;
  completed: boolean;
}

export interface FinancialHealth {
  score: number;
  level: 'poor' | 'fair' | 'good' | 'excellent';
  debtToIncomeRatio: number;
  emergencyFundRatio: number;
  savingsRate: number;
  netWorth: number;
  businessContribution: number;
  recommendations: string[];
  suggestedStrategy: 'debt-focused' | 'balanced' | 'savings-focused';
  improvementSteps?: HealthImprovementStep[];
  emergencyPreparedness?: EmergencyPreparedness;
}

export interface HealthImprovementStep {
  id: string;
  title: string;
  description: string;
  impact: 'high' | 'medium' | 'low';
  difficulty: 'easy' | 'medium' | 'hard';
  estimatedTimeframe: string;
  potentialScoreIncrease: number;
  category: 'debt' | 'savings' | 'income' | 'expenses' | 'emergency';
  completed: boolean;
}

export interface EmergencyPreparedness {
  score: number;
  level: 'unprepared' | 'basic' | 'prepared' | 'well-prepared';
  emergencyFundMonths: number;
  liquidAssets: number;
  debtToIncomeRatio: number;
  incomeStability: number;
  recommendations: string[];
}

export interface SpendingAllowance {
  allowedWantsSpending: number;
  currentWantsSpending: number;
  remainingWantsAllowance: number;
  canSpend: boolean;
  recommendations: string[];
  restrictions: string[];
}

export interface SpendingPattern {
  category: string;
  averageMonthly: number;
  trend: 'increasing' | 'decreasing' | 'stable';
  seasonality: boolean;
  peakMonths: string[];
  optimizationPotential: number;
  suggestions: string[];
}

export interface CashFlowEvent {
  id: string;
  date: string;
  type: 'income' | 'expense' | 'bill' | 'goal_contribution' | 'loan_payment';
  name: string;
  amount: number;
  category: string;
  bankAccountId: string;
  isRecurring: boolean;
  status: 'scheduled' | 'completed' | 'overdue';
  confidence: number;
}

export interface RecurringTransaction {
  id: string;
  type: 'income' | 'expense' | 'bill';
  name: string;
  amount: number;
  frequency: 'weekly' | 'biweekly' | 'monthly' | 'yearly';
  nextOccurrence: string;
  bankAccountId: string;
  category?: string;
  isActive: boolean;
  autoGenerate: boolean;
  lastGenerated?: string;
}

export interface BillNegotiation {
  id: string;
  billId: string;
  billName: string;
  currentAmount: number;
  potentialSavings: number;
  negotiationTips: string[];
  bestTimeToCall: string;
  competitorRates: number[];
  lastNegotiated?: string;
  successProbability: number;
}

export interface FinancialEducation {
  id: string;
  title: string;
  category: 'budgeting' | 'investing' | 'debt' | 'savings' | 'credit' | 'taxes';
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  estimatedTime: number;
  content: string;
  keyTakeaways: string[];
  actionItems: string[];
  completed: boolean;
  progress: number;
  personalizedFor: string[];
}

export interface BusinessBudget {
  marketingPercentage: number;
  operationalPercentage: number;
  profitPercentage: number;
  emergencyPercentage: number;
}

export interface NotificationState {
  show: boolean;
  message: string;
  type: 'success' | 'error' | 'info';
}

export interface Celebration {
  id: string;
  type: 'milestone' | 'goal_achieved' | 'debt_paid' | 'streak' | 'level_up';
  title: string;
  message: string;
  amount?: number;
  icon: string;
  color: string;
  timestamp: string;
  acknowledged: boolean;
}

// Database-driven Gamification System Types
export interface Challenge {
  id: string;
  title: string;
  description: string;
  type: 'daily' | 'weekly' | 'monthly';
  category: 'savings' | 'debt' | 'income' | 'tracking' | 'goals' | 'investment';
  target: number;
  current: number;
  points: number;
  deadline: string;
  isCompleted: boolean;
  isActive: boolean;
  difficulty: 'easy' | 'medium' | 'hard';
}

export interface Achievement {
  id: string;
  title: string;
  description: string;
  category: 'milestone' | 'streak' | 'improvement' | 'mastery';
  icon: string;
  color: string;
  points: number;
  unlockedAt: string;
  isUnlocked: boolean;
  requirements: string[];
}

export interface UserProgress {
  totalPoints: number;
  level: number;
  currentLevelPoints: number;
  nextLevelPoints: number;
  streak: number;
  longestStreak: number;
  challengesCompleted: number;
  achievementsUnlocked: number;
  financialHealthImprovement: number;
  lastActivityDate?: string;
  celebrations?: Celebration[];
}